############################################
#
# Buildout Configuration File for Standalone Plone
# ------------------------------------------------
# $LastChangedDate: 2010-03-06 09:04:51 -0800 (Sat, 06 Mar 2010) $ $LastChangedRevision: 33211M $
#
# After making changes in this configuration file,
# you should run bin/buildout to update the components.
# 
# ALWAYS back up all Plone/Zope data and components
# before changing configuration.
# 
# Running "bin/buildout" will update your installation,
# installing missing components as necessary.
# 
# Use "bin/buildout -n" to update many components here to the newest
# available releases.
# This will update the add-on products you've added in the eggs= lines.
# This will not, however, upgrade Plone itself (or anything else you've
# pinned with a version specification). To upgrade Plone itself, see the
# comments in "Plone Component Versions".
#
# Tutorial instructions for using zc.buildout for
# configuration management are available at:
# http://plone.org/documentation/tutorial/buildout
# Full details at http://pypi.python.org/pypi/zc.buildout
#
############################################


[buildout]

############################################
# Plone Component Versions
# ------------------------
# This version of the Unified Installer has the components
# of Plone 3.3.5 preloaded so that it can install without
# an Internet connection.
# If you want to update, uncomment the "extends = http://..." below,
# edit it to point to the current version URL,
# comment out the "extends = versions.cfg" line
# and run "bin/buildout -n" while attached to the Internet.
# Generally, you only want to do that as part
# of a planned migration.
#
# extends = http://dist.plone.org/release/3.3.5/versions.cfg
extends = versions.cfg
versions = versions

# This extension will dump a list of unpinned versions
# each time you run buildout.
extensions = buildout.dumppickedversions


############################################
# Ports
# -----
# Specify the port on which your Zope installation
# will listen:
http-address = 8080


############################################
# Eggs
# ----
# Add an indented line to the eggs section for any Python
# eggs or packages you wish to include.
#
eggs =
    Plone

# Optional Functionality
# ----------------------
# Uncomment the indented lines to include these products.
# Documentation on all of them, along with many more products,
# is available at
# http://plone.org/products/
#
# Commonly used products:
# * LinguaPlone provides tools for building multi-lingual sites
# * Products.CacheSetup adds the "CacheFu" Plone speedup kit
# * PloneHelpCenter is a simple knowledge base
# * PloneFormGen provides through-the-web form building
#
    Products.LinguaPlone
#    Products.CacheSetup
#    Products.PloneHelpCenter
    Products.PloneFormGen
    Products.PloneGlossary
#
# Commonly used development tools:
# * Clouseau uses AJAX to provide a Python prompt inside Plone
# * DocFinderTab puts an object documentation inspector in the Zope Management Interface
# * Gloworm is a Firebug-like viewlet inspector and customizer
# * plone.reload allows you to refresh Python code and ZCML configuration
#   without restarting Zope. Note that to use plone.reload, you'll also
#   need to uncomment the "zcml" entry for it below.
#
#    Products.Clouseau
#    Products.DocFinderTab
#    Products.Gloworm
#    plone.reload

    
############################################
# ZCML Slugs
# ----------
# Some eggs need ZCML slugs to tell Zope to
# use them. Eggs with names beginning with "Products."
# usually don't need this.
zcml =
#    plone.reload

    
############################################
# Development Eggs
# ----------------
# You can use paster to create "development eggs" to
# develop new products/themes. Put these in the src/
# directory.
# You will also need to add the egg names in the
# eggs section above, and may also need to add them
# to the zcml section.
#
# Provide the *paths* to the eggs you are developing here:
develop =
#    src/my.package


############################################
# Debug Mode
# ----------
# Change debug-mode to "on" to run in development mode.
# 
debug-mode = off


############################################
# Backup Directory
# ----------------
# Sets the target directory for the bin/backup and bin/snapshotbackup
# commands. Default is inside this project's var directory, but ideally
# this should be on a separate volume or backup server.
# 
backups-dir=${buildout:directory}/var



############################################
############################################
# Buildout instructions beyond this point are
# usually only changed by experienced developers.
#
# Beyond here there be dragons!


eggs-directory=/Applications/Plone/buildout-cache/eggs
download-cache=/Applications/Plone/buildout-cache/downloads
newest = false
parts =zope2
    productdistros
    instance
    zopepy
    zopeskel
    precompile
    chown
    unifiedinstaller
    backup
    osxcontroller

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org
    http://download.zope.org/ppix/
    http://download.zope.org/distribution/
    http://effbot.org/downloads

# unzip all eggs for easier debugging
unzip = true

# let's share our Zope install
zope-directory = /Applications/Plone


# This section installs the components of Zope 2.
# Zope operating instances are created elsewhere.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2install
[zope2]
recipe = plone.recipe.zope2install
# update zope by updating this URL:
url = ${versions:zope2-url}
# fake eggs are required to satisfy Zope dependencies while
# zope is not yet eggified.
fake-zope-eggs = true
additional-fake-eggs =
    ZConfig
    pytz


# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL, 
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
# For options see http://pypi.python.org/pypi/plone.recipe.distros
[productdistros]
recipe = plone.recipe.distros
urls =
nested-packages =
version-suffix-packages = 


# Use this section to install and configure a Zope operating
# instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance
[instance]
recipe = plone.recipe.zope2instance
zope2-location = ${zope2:location}
# The line below sets only the initial password. It will not change an
# existing password.
user = admin:admin
http-address = ${buildout:http-address}
# change debug-mode to "on" to run in development mode
debug-mode = ${buildout:debug-mode}
# change verbose-security to "on" for detailed security
# errors while developing
verbose-security = off
# change deprecation-warnings to "on" to get log warnings
# for deprecated usages.
deprecation-warnings = off


# If you want Zope to know about any additional eggs, list them here.
# e.g. eggs = ${buildout:eggs} my.package
eggs =
    ${buildout:eggs}


# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = 
    ${buildout:zcml}


products =
    ${buildout:directory}/products
    ${productdistros:location}


# You may also control the environment variables for the instance.
environment-vars =
    PYTHON_EGG_CACHE ${buildout:directory}/var/.python-eggs


# installs a zopepy python interpreter that runs with your
# full Zope environment
[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
extra-paths = ${instance:zope2-location}/lib/python
scripts = zopepy


# installs paster and Zopeskel
[zopeskel]
recipe = zc.recipe.egg
eggs =
    PasteScript
    ZopeSkel


# compiles .py files in ./parts and ./products so that they don't
# need to be compiled by the daemon
# For options see http://pypi.python.org/pypi/plone.recipe.precompiler
[precompile]
recipe = plone.recipe.precompiler


# This recipe is used to set permissions -- and ownership for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
[chown]
recipe = plone.recipe.command
command =chmod 600 .installed.cfg
update-command = ${chown:command}


# This recipe installs the plonectl script and a few other convenience
# items.
# For options see http://pypi.python.org/pypi/plone.recipe.unifiedinstaller
[unifiedinstaller]
recipe = plone.recipe.unifiedinstaller<=4.0dev
user = ${instance:user}
primary-port = ${instance:http-address}
sudo-command = 


# This recipe builds the backup, restore and snapshotbackup commands.
# For options see http://pypi.python.org/pypi/collective.recipe.backup
[backup]
recipe = collective.recipe.backup
location = ${buildout:backups-dir}/backups
snapshotlocation = ${buildout:backups-dir}/snapshotbackups


[versions]
Cheetah = 2.0.1
Paste = 1.7.2
PasteScript = 1.7.3
ZopeSkel = 2.11.1
collective.recipe.backup = 1.1
plone.recipe.command = 1.0
plone.recipe.distros = 1.5
plone.recipe.osxcontroller = 0.3
plone.recipe.precompiler = 0.3
plone.recipe.unifiedinstaller = 0.9
collective.recipe.zope2cluster = 1.0
PasteDeploy = 1.3.3
zc.recipe.egg = 1.2.2

[osxcontroller]
recipe = plone.recipe.osxcontroller
